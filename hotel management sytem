#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <ctime>
#include <limits>
#include <cctype>
using namespace std;
struct Reservation {
    string fullName;
    string contactNumber;
    string emailAddress;
    string idProof;
    int reservationID;
    string checkInDate;
    string checkInTime;
    string checkOutDate;
    string checkOutTime;
    int numberOfNights;
    int adults;
    int children;
    string roomType;
    int roomNumber;
    int floorNumber;
    string paymentMethod;
    int advanceDeposit;
    string billingAddress;
    bool earlyCheckIn;
    bool lateCheckOut;
    bool accessibilityRequirements;
    bool extraBed;
    bool babyCot;
    string mealPreference;
    int totalAmount;
    bool isBooked;
};
struct Floor {
    int floorNumber;
    int singleRooms;
    int doubleRooms;
    int suiteRooms;
    int deluxeRooms;
    int presidentialRooms;
};
class Hotel {
private:
    int pricesingle=1000,pricedouble=1500,pricesuite=2000,pricedeluxe=3000,pricepresidential=5000;
    int totalsingle=10,totaldouble=10,totalsuite=10,totaldeluxe=10,totalpresidential=10;
    vector<Reservation> reservations;
    vector<Floor> floors;
    int totalRevenue = 0;
    int activeCount = 0;
    int cancelledCount = 0;
    bool isSetupDone = false;
    bool getYesNoInput(const string& prompt) {
        char choice;
        while (true) {
            cout << prompt << " (y/n): ";
            cin >> choice;
            choice = tolower(choice);
            if (choice == 'y') return true;
            else if (choice == 'n') return false;
            else cout << "Invalid input. Please enter 'y' or 'n'.\n";
        }
    }
public:
    void setfloor(){
        cout<<"\n=== SET UP FLOORS AND ROOMS ===\n";
        cout<<"Enter the number of floors in the hotel:"<<endl;
        int numfloors;
        cin>>numfloors;
        floors.clear();
        totalsingle=totaldouble=totalsuite=totaldeluxe=totalpresidential=0;
        for(int i=1;i<=numfloors;i++){
            Floor f;
            f.floorNumber=i;
            cout<<"Enter number of Single rooms: "; cin>>f.singleRooms;
            totalsingle+=f.singleRooms;
            cout<<endl;
            cout<<"Enter number of Double rooms: "; cin>>f.doubleRooms;
            totaldouble+=f.doubleRooms;
            cout<<endl;
            cout<<"Enter number of Suite rooms: "; cin>>f.suiteRooms;
            totalsuite+=f.suiteRooms;
            cout<<endl;
            cout<<"Enter number of Deluxe rooms: "; cin>>f.deluxeRooms;
            totaldeluxe+=f.deluxeRooms;
            cout<<endl;
            cout<<"Enter number of Presidential rooms: "; cin>>f.presidentialRooms;
            totalpresidential+=f.presidentialRooms;
            cout<<endl;
            floors.push_back(f);
        }
    }
    Hotel(const vector<Floor>& hotelFloors) : floors(hotelFloors) {
        srand(time(0));
    }
    int generateReservationID() {
        return rand() % 10000 + 10000;
    }
    int generateRoomNumber(int chosenFloor) {
        return chosenFloor * 100 + rand() % 100 + 1;
    }
    void chooseTypeRooms(const string& chosenType) {
        bool found = false;
        for (auto& f : floors) {
            if ((chosenType == "single" && f.singleRooms > 0) ||
                (chosenType == "double" && f.doubleRooms > 0) ||
                (chosenType == "suite" && f.suiteRooms > 0) ||
                (chosenType == "deluxe" && f.deluxeRooms > 0) ||
                (chosenType == "presidential" && f.presidentialRooms > 0)) {
                found = true;
                cout << "Room available on floor " << f.floorNumber << endl;
                if (chosenType == "single") cout << "Rooms available: " << f.singleRooms << endl;
                else if (chosenType == "double") cout << "Rooms available: " << f.doubleRooms << endl;
                else if (chosenType == "suite") cout << "Rooms available: " << f.suiteRooms << endl;
                else if (chosenType == "deluxe") cout << "Rooms available: " << f.deluxeRooms << endl;
                else if (chosenType == "presidential") cout << "Rooms available: " << f.presidentialRooms << endl;
            }
        }
        if (!found)
            cout << "No rooms available of type: " << chosenType << endl;
    }
    float calculateAmount(const string& roomType, int days, bool accessibilityRequirements, bool extraBed, bool babyCot) {
        float baseAmount = 0;
        string lowerType = roomType;
        transform(lowerType.begin(), lowerType.end(), lowerType.begin(), ::tolower);
        if (lowerType == "single") baseAmount = pricesingle * days;
        else if (lowerType == "double") baseAmount = pricedouble* days;
        else if (lowerType == "suite") baseAmount = pricesuite * days;
        else if (lowerType == "deluxe") baseAmount = pricedeluxe * days;
        else if (lowerType == "presidential") baseAmount = pricepresidential* days;
        if (accessibilityRequirements) baseAmount += 200 * days;
        if (extraBed) baseAmount += 500 * days;
        if (babyCot) baseAmount += 1000 * days;
        return baseAmount;
    }
    void reduceRoomCount(int floorIndex, const string& chosenType) {
        if (floorIndex < 0 || floorIndex >= (int)floors.size()) return;
        Floor& f = floors[floorIndex];
        string lowerType = chosenType;
        transform(lowerType.begin(), lowerType.end(), lowerType.begin(), ::tolower);
        if (lowerType == "single" && f.singleRooms > 0) f.singleRooms--;
        else if (lowerType == "double" && f.doubleRooms > 0) f.doubleRooms--;
        else if (lowerType == "suite" && f.suiteRooms > 0) f.suiteRooms--;
        else if (lowerType == "deluxe" && f.deluxeRooms > 0) f.deluxeRooms--;
        else if (lowerType == "presidential" && f.presidentialRooms > 0) f.presidentialRooms--;
        else
            cout << "No rooms of this type to reduce on floor " << floorIndex << endl;
    }
    void globalavalibilitycheck(){
        cout<<"\n=== Total Rooms Available ===\n";
        cout<<"Single Rooms Available: "<<totalsingle<<endl;
        cout<<"Double Rooms Available: "<<totaldouble<<endl;
        cout<<"Suite Rooms Available: "<<totalsuite<<endl;
        cout<<"Deluxe Rooms Available: "<<totaldeluxe<<endl;
        cout<<"Presidential Rooms Available: "<<totalpresidential<<endl;
    }
    void checkroomavailablity(){
        int roomnumber;
        cout<<"enter room number to checkin:"<<endl;
        cin>>roomnumber;
        for(auto& res:reservations){
            if(res.roomNumber==roomnumber && res.isBooked){
                cout<<"Room number "<<roomnumber<<" is already booked."<<endl;
                return;
            }
        }
        cout<<"Room number "<<roomnumber<<" is available for check-in."<<endl;
    }
    void checkoutroom(){
        int roomnumber;
        cout<<"enter room number to checkout:"<<endl;
        cin>>roomnumber;
        int floornumber=roomnumber/100;
        int floorIndex = -1;
        for(int i=0;i<(int)floors.size();++i){
            if(floors[i].floorNumber==floornumber){
                floorIndex=i;
                break;
            }
        }
        if(floorIndex==-1){
            cout<<"invalid floor number"<<endl;
            return;
        }
        for(auto& res:reservations){
            if(res.roomNumber==roomnumber && res.isBooked){
                res.isBooked=false;
                string roomType=res.roomType;
                if(roomType=="single")
                    floors[floorIndex].singleRooms++;
                else if(roomType=="double")
                    floors[floorIndex].doubleRooms++;
                else if(roomType=="suite")
                    floors[floorIndex].suiteRooms++;
                else if(roomType=="deluxe")
                    floors[floorIndex].deluxeRooms++;
                else if(roomType=="presidential")
                    floors[floorIndex].presidentialRooms++;
                if(roomType=="single") totalsingle++;
                else if(roomType=="double") totaldouble++;
                else if(roomType=="suite") totalsuite++;
                else if(roomType=="deluxe") totaldeluxe++;
                else if(roomType=="presidential") totalpresidential++;
                cout<<"Room number "<<roomnumber<<" checked out successfully."<<endl;
                return;
            }
        }
    }
    void roomprices(){
        cout<<"Current PRICES:\n";
        cout<<"Single: $"<<pricesingle<<", Double: $"<<pricedouble<<", Suite: $"<<pricesuite<<"\n";
    }
    void setRoomPrices(){
        cout<<"\n=== SET ROOM PRICES ===\n";
        roomprices();
        cout<<"Wanna Change the prices? (y/n)"<<endl;
        if(getYesNoInput("Confirm price change")){
            cout<<"Enter new price for Single rooms: $";
            cin>>pricesingle;
            cout<<"Enter new price for Double rooms: $";
            cin>>pricedouble;
            cout<<"Enter new price for Suite rooms: $";
            cin>>pricesuite;
            cout<<"Enter new price for Deluxe rooms: $";
            cin>>pricedeluxe;
            cout<<"Enter new price for Presidential rooms: $";
            cin>>pricepresidential;
            cout<<"Room prices updated successfully!\n";
        }
        else{
            cout<<"Room prices remain unchanged.\n";
        }
    }
    void veiwmyreservation(){
        int roomnumber;
        cout<<"enter room number to view reservation details:"<<endl;
        cin>>roomnumber;
        for(auto& res:reservations){
            if(res.roomNumber==roomnumber && res.isBooked){
            cout << "\n===== RESERVATION DETAILS =====\n";
            cout << "Reservation ID: " << res.reservationID << "\n";
            cout << "Guest Name: " << res.fullName << "\n";
            cout << "Contact Number: " << res.contactNumber << "\n";
            cout << "Email: " << res.emailAddress << "\n";
            cout << "ID Proof: " << res.idProof << "\n";
            cout << "Check-in: " << res.checkInDate << " " << res.checkInTime << "\n";
            cout << "Check-out: " << res.checkOutDate << " " << res.checkOutTime << "\n";
            cout << "Nights: " << res.numberOfNights << "\n";
            cout << "Guests (Adults/Children): " << res.adults << "/" << res.children << "\n";
            cout << "Room Type: " << res.roomType << "\n";
            cout << "Room Number: " << res.roomNumber << "\n";
            cout << "Floor: " << res.floorNumber << "\n";
            cout << "Payment Method: " << res.paymentMethod << "\n";
            cout << "Advance Deposit: $" << res.advanceDeposit << "\n";
            cout << "Billing Address: " << (res.billingAddress.empty() ? "N/A" : res.billingAddress) << "\n";
            cout << "Meal Preference: " << res.mealPreference << "\n";
            cout << "Total Amount: $" << res.totalAmount << "\n";
            cout << "Status: " << (res.isBooked ? "BOOKED" : "CANCELLED") << "\n";
            cout << "-----------------------------\n";
            return;
        }
        }
        cout<<"No active reservation found for this room number.\n";
    }
    void checkflooravailability(){
        int floornumber;
        cout<<"enter floor number to check availability:"<<endl;
        cin>>floornumber;
        for(auto& f:floors){
            if(f.floorNumber==floornumber){
                cout<<"Rooms available on floor "<<floornumber<<":\n";
                cout<<"Single Rooms: "<<f.singleRooms<<endl;
                cout<<"Double Rooms: "<<f.doubleRooms<<endl;
                cout<<"Suite Rooms: "<<f.suiteRooms<<endl;
                cout<<"Deluxe Rooms: "<<f.deluxeRooms<<endl;
                cout<<"Presidential Rooms: "<<f.presidentialRooms<<endl;
                return;
            }
        }
        cout<<"invalid floor number"<<endl;
    }
    void reserveRoom() {
        cout << "\n=== Room Reservation ===\n";
        cout << "Select room type:\n1. Single\n2. Double\n3. Suite\n4. Deluxe\n5. Presidential\nChoice (1-5): ";
        int roomChoice;
        cin >> roomChoice;
        cin.ignore();
        string chosenType;
        switch (roomChoice) {
            case 1: chosenType = "single"; break;
            case 2: chosenType = "double"; break;
            case 3: chosenType = "suite"; break;
            case 4: chosenType = "deluxe"; break;
            case 5: chosenType = "presidential"; break;
            default:
                cout << "Invalid choice.\n";
                return;
        }
        chooseTypeRooms(chosenType);
        cout << "Enter floor number you want to book on: ";
        int chosenFloor;
        cin >> chosenFloor;
        cin.ignore();
        int floorIndex = -1;
        for (int i = 0; i < (int)floors.size(); ++i) {
            if (floors[i].floorNumber == chosenFloor) {
                floorIndex = i;
                break;
            }
        }
        if (floorIndex == -1) {
            cout << "Invalid floor selected.\n";
            return;
        }
        // Availability check on chosen floor
        const Floor& ff = floors[floorIndex];
        if ((chosenType=="single" && ff.singleRooms<=0) ||
            (chosenType=="double" && ff.doubleRooms<=0) ||
            (chosenType=="suite" && ff.suiteRooms<=0) ||
            (chosenType=="deluxe" && ff.deluxeRooms<=0) ||
            (chosenType=="presidential" && ff.presidentialRooms<=0)){
            cout<<"No rooms of selected type available on floor "<<chosenFloor<<"\n";
            return;
        }
        Reservation res;
        res.reservationID = generateReservationID();
        res.roomType = chosenType;
        res.floorNumber = chosenFloor;
        res.roomNumber = generateRoomNumber(chosenFloor);
        cout << "\n=== Guest Information ===\n";
        cout << "Enter full name: "; getline(cin, res.fullName);
       label1 : cout << "Enter contact number: "; getline(cin, res.contactNumber);
        if(res.contactNumber.length()<10 || res.contactNumber.length()>10){
            cout<<"invalid contact number"<<endl;
            cout<<"please re-enter the contact number"<<endl;
            goto label1;
        }
        if(res.contactNumber.find_first_not_of("0123456789") != string::npos){
            cout<<"invalid contact number"<<endl;
            cout<<"please re-enter the contact number"<<endl;
            goto label1;
        }
      label2:  cout << "Enter email address: "; getline(cin, res.emailAddress);
        if(res.emailAddress.find('@')==string::npos || res.emailAddress.find('.')==string::npos){
            cout<<"invalid email address"<<endl;
            cout<<"please re-enter the email address"<<endl;
            goto label2;
        }
        cout << "Enter ID proof: "; getline(cin, res.idProof);
        cout << "\n=== Stay Information ===\n";
        cout << "Enter check-in date (YYYY-MM-DD): "; getline(cin, res.checkInDate);
        cout << "Enter check-in time (HH:MM): "; getline(cin, res.checkInTime);
        cout << "Enter check-out date (YYYY-MM-DD): "; getline(cin, res.checkOutDate);
        cout << "Enter check-out time (HH:MM): "; getline(cin, res.checkOutTime);
        cout << "Enter number of nights: "; cin >> res.numberOfNights;
        cout << "Enter number of adults: "; cin >> res.adults;
        cout << "Enter number of children: "; cin >> res.children;
        cin.ignore();
        cout << "\n=== Payment Information ===\n";
        cout << "Select payment method:\n1. Credit/Debit Card\n2. Online Wallet\n3. Cash at Hotel\nChoice: ";
        int payChoice;
        cin >> payChoice;
        cin.ignore();
        if (payChoice == 1) res.paymentMethod = "Credit/Debit Card";
        else if (payChoice == 2) res.paymentMethod = "Online Wallet";
        else res.paymentMethod = "Cash at Hotel";
        cout << "Enter advance deposit (0 if none): ";
        cin >> res.advanceDeposit;
        cin.ignore();
        cout << "Enter billing address (or leave blank): ";
        getline(cin, res.billingAddress);
        cout << "\n=== Special Requests ===\n";
        res.earlyCheckIn = getYesNoInput("Do you require early check-in?");
        res.lateCheckOut = getYesNoInput("Do you require late check-out?");
        res.accessibilityRequirements = getYesNoInput("Do you have any accessibility requirements?");
        res.extraBed = getYesNoInput("Do you require an extra bed?");
        res.babyCot = getYesNoInput("Do you require a baby cot?");
        cout << "Select meal preference:\n1. Veg\n2. Non-Veg\n";
        int mealChoice;
        while (true) {
            cout << "Enter choice (1-2): ";
            cin >> mealChoice;
            cin.ignore();
            if (mealChoice == 1 || mealChoice == 2) break;
            cout << "Invalid choice. Please enter 1 or 2.\n";
        }
        res.mealPreference = (mealChoice == 1) ? "Veg" : "Non-Veg";

        res.totalAmount = static_cast<int>(calculateAmount(res.roomType, res.numberOfNights,
                                    res.accessibilityRequirements, res.extraBed, res.babyCot));
        res.isBooked = true;
        reservations.push_back(res);
        totalRevenue += res.totalAmount;
        reduceRoomCount(floorIndex, chosenType);
        if(chosenType=="single") totalsingle--;
        else if(chosenType=="double") totaldouble--;
        else if(chosenType=="suite") totalsuite--;
        else if(chosenType=="deluxe") totaldeluxe--;
        else if(chosenType=="presidential") totalpresidential--;
        cout << "\n===== BOOKING CONFIRMATION =====\n";
        cout << "Booking successful! Reservation ID: " << res.reservationID << "\n";
        cout << "Guest Name: " << res.fullName << "\n";
        cout << "Room Type: " << res.roomType << "\n";
        cout << "Floor: " << res.floorNumber << "\n";
        cout << "Room Number: " << res.roomNumber << "\n";
        cout << "Check-in: " << res.checkInDate << " " << res.checkInTime << "\n";
        cout << "Check-out: " << res.checkOutDate << " " << res.checkOutTime << "\n";
        cout << "Total Amount: $" << res.totalAmount << "\n";
        cout << "Advance Paid: $" << res.advanceDeposit << "\n";
        cout << "Remaining: $" << (res.totalAmount - res.advanceDeposit) << "\n";
        cout << "Payment Method: " << res.paymentMethod << "\n";
        cout << "================================\n";
    }
    void cancelreservation(){
        cout<<"cancel reservation using room number or reservation id"<<endl;
        cout<<"1.room number"<<endl;
        cout<<"2.reservation id"<<endl;
        cout<<"enter choice:"<<endl;
        int choice;
        cin>>choice;
        if(choice==1){
            int roomnumber;
            cout<<"enter room number to cancel reservation:"<<endl;
            cin>>roomnumber;
            for(auto& res: reservations){
                if(res.roomNumber==roomnumber && res.isBooked){
                    res.isBooked=false;
                    cout<<"reservation cancelled successfully for room number "<<roomnumber<<endl;
                    int f=res.floorNumber;
                    string roomType=res.roomType;
                    for(size_t i=0;i<floors.size();++i){ if(floors[i].floorNumber==f){
                        if(roomType=="single"){ floors[i].singleRooms++; totalsingle++; }
                        else if (roomType=="double"){ floors[i].doubleRooms++; totaldouble++; }
                        else if (roomType=="suite"){ floors[i].suiteRooms++; totalsuite++; }
                        else if (roomType=="deluxe"){ floors[i].deluxeRooms++; totaldeluxe++; }
                        else if(roomType=="presidential"){ floors[i].presidentialRooms++; totalpresidential++; }
                        break; }}
                    return;
                }
            }
            cout<<"No active reservation found for that room number.\n";
        }
        else if(choice ==2){
            int reservationid;
            cout<<"enter reservation ID to cancel reservation:"<<endl;
            cin>>reservationid;
            for(auto& res: reservations){
                if(res.reservationID== reservationid && res.isBooked){
                    res.isBooked=false;
                    cout<<"reservation cancelled successfully for reservation ID "<<reservationid<<endl;
                    int f=res.floorNumber;
                    string roomType=res.roomType;
                    for(size_t i=0;i<floors.size();++i){ if(floors[i].floorNumber==f){
                        if(roomType=="single"){ floors[i].singleRooms++; totalsingle++; }
                        else if (roomType=="double"){ floors[i].doubleRooms++; totaldouble++; }
                        else if (roomType=="suite"){ floors[i].suiteRooms++; totalsuite++; }
                        else if (roomType=="deluxe"){ floors[i].deluxeRooms++; totaldeluxe++; }
                        else if(roomType=="presidential"){ floors[i].presidentialRooms++; totalpresidential++; }
                        break; }}
                    return;
                }
            }
            cout<<"No active reservation found for that reservation ID.\n";
        }
        else{
            cout<<"invalid choice"<<endl;
           cancelreservation();
        }
    }
    void viewReservations() {
        if (reservations.empty()) {
            cout << "No reservations have been made yet!\n";
            return;
        }
        activeCount = 0;
        cancelledCount = 0;
        for (const auto& res : reservations) {
            if (res.isBooked) activeCount++;
            else cancelledCount++;
            cout << "Reservation ID: " << res.reservationID << "\n";
            cout << "Guest Name: " << res.fullName << "\n";
            cout << "Contact Number: " << res.contactNumber << "\n";
            cout << "Email: " << res.emailAddress << "\n";
            cout << "ID Proof: " << res.idProof << "\n";
            cout << "Check-in: " << res.checkInDate << " " << res.checkInTime << "\n";
            cout << "Check-out: " << res.checkOutDate << " " << res.checkOutTime << "\n";
            cout << "Nights: " << res.numberOfNights << "\n";
            cout << "Guests (Adults/Children): " << res.adults << "/" << res.children << "\n";
            cout << "Room Type: " << res.roomType << "\n";
            cout << "Room Number: " << res.roomNumber << "\n";
            cout << "Floor: " << res.floorNumber << "\n";
            cout << "Payment Method: " << res.paymentMethod << "\n";
            cout << "Advance Deposit: $" << res.advanceDeposit << "\n";
            cout << "Billing Address: " << (res.billingAddress.empty() ? "N/A" : res.billingAddress) << "\n";
            cout << "Meal Preference: " << res.mealPreference << "\n";
            cout << "Total Amount: $" << res.totalAmount << "\n";
            cout << "Status: " << (res.isBooked ? "BOOKED" : "CANCELLED") << "\n";
            cout << "-----------------------------\n";
        }
    }
    void totalActiveBookings() {
        cout << "Total Active Bookings: " << activeCount << endl;
    }
    void totalCancelledBookings() {
        cout << "Total Cancelled Bookings: " << cancelledCount << endl;
    }
    void totalbookings(){
        cout<<"total Bookings:"<<activeCount+cancelledCount<<endl;
        cout<<"Check active bookings and cancelled bookings for details."<<endl;
        cout<<"active bookings:press 1"<<endl;
        cout<<"cancelled bookings:press 2"<<endl;
        int i;
        cin>>i;
        if(i==1)
            totalActiveBookings();
        else if(i==2)
            totalCancelledBookings();
        else
            cout<<"invalid choice"<<endl;
    }
    void viewRevenue() {
        cout << "\n=== REVENUE REPORT ===\n";
        cout << "Total Revenue: $" << totalRevenue << "\n";

        if (!reservations.empty()) {
            int totalBookings = 0;
            for (const auto& res : reservations) {
                if (res.isBooked) totalBookings++;
            }
            cout << "Total Active Bookings: " << totalBookings << "\n";
            if (totalBookings > 0) {
                cout << "Average Revenue per Booking: $" << (totalRevenue / totalBookings) << "\n";
            }
        }
    }
};
int main() {
    vector<Floor> defaultFloors;
    for (int i = 1; i <= 5; ++i) {
        Floor f;
        f.floorNumber = i;
        f.singleRooms = 2;
        f.doubleRooms = 2;
        f.suiteRooms = 2;
        f.deluxeRooms = 2;
        f.presidentialRooms = 2;
        defaultFloors.push_back(f);
    }

    Hotel myHotel(defaultFloors);
    int choice;

    cout << "\n==============================\n";
    cout << "   WELCOME TO MOHAN'S HOTEL\n";
    cout << "==============================\n";

    while (true) {
        cout << "\nSelect user type:\n";
        cout << "1. Admin\n";
        cout << "2. Customer\n";
        cout << "3. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        if (choice == 1) {
            string password;
            pass: cout << "Enter admin password: ";
            cin >> password;
            if (password != "admin123") {
                cout << "Invalid password!\n";
                goto pass;
            }
            int adminChoice;
            do {
                cout << "\n=== ADMIN MENU ===\n";
                cout << "1. Set up floors and rooms\n";
                cout << "2. View room prices\n";
                cout << "3. Set/Update room prices\n";
                cout << "4. Check floor availability\n";
                cout << "5. Global availability\n";
                cout << "6. View all reservations\n";
                cout << "7. View total bookings\n";
                cout << "8. View revenue report\n";
                cout << "9. Back to main menu\n";
                cout << "Enter your choice: ";
                cin >> adminChoice;
                switch (adminChoice) {
                    case 1: myHotel.setfloor(); break;
                    case 2: myHotel.roomprices(); break;
                    case 3: myHotel.setRoomPrices(); break;
                    case 4: myHotel.checkflooravailability(); break;
                    case 5: myHotel.globalavalibilitycheck(); break;
                    case 6: myHotel.viewReservations(); break;
                    case 7: myHotel.totalbookings(); break;
                    case 8: myHotel.viewRevenue(); break;
                    case 9: cout << "Returning to main menu...\n"; break;
                    default: cout << "Invalid choice.\n"; break;
                }
            } while (adminChoice != 9);
        }
        else if (choice == 2) {
            int custChoice;
            do {
                cout << "\n=== CUSTOMER MENU ===\n";
                cout << "1. Check room availability (global)\n";
                cout << "2. Check floor availability\n";
                cout << "3. Reserve a room\n";
                cout << "4. View my reservation\n";
                cout << "5. Cancel my reservation\n";
                cout << "6. Check out room\n";
                cout << "7. Back to main menu\n";
                cout << "Enter your choice: ";
                cin >> custChoice;
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                switch (custChoice) {
                    case 1: myHotel.globalavalibilitycheck(); break;
                    case 2: myHotel.checkflooravailability(); break;
                    case 3: myHotel.reserveRoom(); break;
                    case 4: myHotel.veiwmyreservation(); break;
                    case 5: myHotel.cancelreservation(); break;
                    case 6: myHotel.checkoutroom(); break;
                    case 7: cout << "Returning to main menu...\n"; break;
                    default: cout << "Invalid choice.\n"; break;
                }
            } while (custChoice != 7);
        }
        else if (choice == 3) {
            cout << "\nThank you for using MOHAN'S HOTEL !\n";
            break;
        }
        else {
            cout << "Invalid option. Try again.\n";
        }
    }
    return 0;
}
